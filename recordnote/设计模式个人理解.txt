1, 简单的设计模式(策略/模板/原型),设计一个抽象基类或接口类,一般再用一个context场景类来使用这个抽象类的接口.
2, 基类为抽象类或接口类.(泛化)
3, 成员变量采用抽象类引用或指针.(关联)
4, 成员函数参数采用抽象类引用或指针.(依赖)
5, 子类除了从基类派生,而且它的成员变量还是基类的引用或指针类型.(装饰和组合)
6, 复杂的设计模式(观察者/桥接/访问者),一般是设计两个类.这两个基类之间存在互相依赖/关联,或者一个类关联另一个的基类,而另一个关联本方的子类.没有见到三个类相关的更复杂的设计模式.
7, 弱耦合的提升方法,设计类时努力提炼抽象基类(泛化),努力降维类之间的关系(继承->组合->聚合->关联->依赖). 不依赖某个类对象的状态或生命周期时,就不把它做为自己的数据成员,应该放在函数参数,函数体中或返回值中使用它.


